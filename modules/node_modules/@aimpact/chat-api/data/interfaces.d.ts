export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };CategoryBaseData {
    id: string;
    name: string;
    description: string;
  }
  export interface IPromptCategoryData extends IPromptCategoryBaseData {
    prompts: Record<string, string>;
    project: {
      id: string;
      name: string;
    };
  }
}


// prompts\language.ts
declare namespace ns_1 {
  export interface IPromptOptionData {
    id: string;
    value: string;
  }
  export interface IPromptLanguageData {
    id: string;
    language: string;
    value?: string;
    literals?: {
      pure?: string[];
      dependencies?: string[];
      metadata?: string[];
    };
    project: {
      id: string;
      name: string;
      identifier: string;
    };
    options?: IPromptOptionData[];
  }
}


// prompts\template.ts
declare namespace ns_2 {
  import IPromptCategoryData = ns_0.IPromptCategoryData;
  import IPromptOptionData = ns_1.IPromptOptionData;
  interface IBaseData {
    id: string;
    name: string;
    description?: string;
    language: {
      default: string;
      languages: string[];
    };
    format: 'json' | 'text';
    is: 'prompt' | 'function' | 'dependency';
    literals?: {
      pure?: string[];
      dependencies?: string[];
      metadata?: string[];
    };
  }
  export interface IPromptTemplateBaseData extends IBaseData {
    projectId: string;
    language: {
      default: string;
      languages: string[];
    };
    value?: string;
    options?: IPromptOptionData[];
  }
  export interface IPromptTemplateData extends IBaseData {
    identifier: string;
    project: {
      id: string;
      name: string;
      identifier: string;
    };
    categories?: IPromptCategoryData[];
    value: string;
  }
  export interface IPromptTemplateLanguageData {
    id: string;
    project: {
      id: string;
      name: string;
      identifier: string;
    };
    language: string;
    value?: string;
    literals?: {
      pure?: string[];
      dependencies?: string[];
      metadata?: string[];
    };
  }
  export {};
}


export import IPromptCategoryBaseData = ns_0.IPromptCategoryBaseData;
export import IPromptCategoryData = ns_0.IPromptCategoryData;
export import IPromptOptionData = ns_1.IPromptOptionData;
export import IPromptLanguageData = ns_1.IPromptLanguageData;
export import IPromptTemplateBaseData = ns_2.IPromptTemplateBaseData;
export import IPromptTemplateData = ns_2.IPromptTemplateData;
export import IPromptTemplateLanguageData = ns_2.IPromptTemplateLanguageData;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };ta;
export import IPromptLanguageData = ns_1.IPromptLanguageData;
export import IPromptTemplateBaseData = ns_2.IPromptTemplateBaseData;
export import IPromptTemplateData = ns_2.IPromptTemplateData;
export import IPromptTemplateLanguageData = ns_2.IPromptTemplateLanguageData;
export import IUsersBaseData = ns_3.IUsersBaseData;
export import IUsersData = ns_3.IUsersData;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };mptTemplateBaseData;
export import IPromptTemplateData = ns_3.IPromptTemplateData;
export import IPromptTemplateLanguageData = ns_3.IPromptTemplateLanguageData;
export import IUsersBaseData = ns_4.IUsersBaseData;
export import IUsersData = ns_4.IUsersData;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };nguageData;
export import IUsersBaseData = ns_5.IUsersBaseData;
export import IUsersData = ns_5.IUsersData;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };ptTemplateData;
export import IPromptTemplateLanguageData = ns_5.IPromptTemplateLanguageData;
export import IUsersBaseData = ns_6.IUsersBaseData;
export import IUsersData = ns_6.IUsersData;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };