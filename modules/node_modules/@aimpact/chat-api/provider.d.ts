/************
Processor: ts
************/

// audio.ts
declare namespace ns_0 {
  const ActionsBridge: any;
  export class AudioProvider extends ActionsBridge {
    load(id: string): Promise<any>;
    publish(data: any): Promise<any>;
    list(): Promise<any>;
    bulkSave(data: any): Promise<any>;
    constructor();
  }
  export {};
}


// chat.ts
declare namespace ns_1 {
  const ActionsBridge: any;
  interface IChat {
    id: string;
    name: string;
    usage: string;
    userId: string;
    category: string;
    knowledgeBoxId: string;
    metadata: {};
  }
  export class ChatProvider extends ActionsBridge {
    load({
      id
    }: {
      id: string;
    }): Promise<any>;
    publish(data: IChat): Promise<any>;
    delete({
      id
    }: {
      id: string;
    }): Promise<any>;
    list(specs: any): Promise<any>;
    bulkSave(data: any): Promise<any>;
    sendMessage(data: any): Promise<any>;
    constructor();
  }
  export {};
}


// documents.ts
declare namespace ns_2 {
  const ActionsBridge: any;
  export class DocumentProvider extends ActionsBridge {
    load(id: string): Promise<any>;
    publish(data: any): Promise<any>;
    list(): Promise<any>;
    bulkSave(data: any): Promise<any>;
    constructor();
  }
  export {};
}


// knowledge-boxes\knowledge-bases.ts
declare namespace ns_3 {
  const ActionsBridge: any;
  export class KnowledgeBasesProvider extends ActionsBridge {
    load(id: string): Promise<any>;
    publish(data: any): Promise<any>;
    list(): Promise<any>;
    bulkSave(data: any): Promise<any>;
    constructor();
  }
  export {};
}


// knowledge-boxes\knowledge-box.ts
declare namespace ns_4 {
  const ActionsBridge: any;
  export class KnowledgeBoxProvider extends ActionsBridge {
    /**
     * @todo validate if it's necessary to filter by user
     * @param param
     * @returns
     */
    load({
      id
    }: {
      id: string;
      userId: string;
    }): Promise<any>;
    publish(data: any): Promise<any>;
    list({
      userId
    }: {
      userId: any;
    }): Promise<any>;
    bulkSave(data: any): Promise<any>;
    constructor();
  }
  export {};
}


// knowledge-boxes\shared.ts
declare namespace ns_5 {
  const ActionsBridge: any;
  export class SharedKnowledgeBasesProvider extends ActionsBridge {
    load(id: string): Promise<any>;
    publish(data: any): Promise<any>;
    list(): Promise<any>;
    bulkSave(data: any): Promise<any>;
    constructor();
  }
  export {};
}


// messages.ts
declare namespace ns_6 {
  const ActionsBridge: any;
  export class MessageProvider extends ActionsBridge {
    load(id: string): Promise<any>;
    publish(data: any): Promise<any>;
    list(): Promise<any>;
    bulkSave(data: any): Promise<any>;
    constructor();
  }
  export {};
}


// user.ts
declare namespace ns_7 {
  const ActionsBridge: any;
  export class UserProvider extends ActionsBridge {
    updateUser(user: any): Promise<any>;
    login(user: any): Promise<any>;
    constructor();
  }
  export {};
}


export import AudioProvider = ns_0.AudioProvider;
export import ChatProvider = ns_1.ChatProvider;
export import DocumentProvider = ns_2.DocumentProvider;
export import KnowledgeBasesProvider = ns_3.KnowledgeBasesProvider;
export import KnowledgeBoxProvider = ns_4.KnowledgeBoxProvider;
export import SharedKnowledgeBasesProvider = ns_5.SharedKnowledgeBasesProvider;
export import MessageProvider = ns_6.MessageProvider;
export import UserProvider = ns_7.UserProvider;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };