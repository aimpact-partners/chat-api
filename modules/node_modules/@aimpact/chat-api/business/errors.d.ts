/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/response/main';
// generator.ts
declare namespace ns_0 {
  import BusinessErrorManager = ns_1.BusinessErrorManager;
  import ErrorManager = __beyond_dep_ns_0.ErrorManager;
  export enum ErrorCodes {
    internalError = 1,
    documentNotFound = 404,
    documentNotSaved = 800,
    documentAlreadyExist = 801,
    invalidParameters = 802,
    projectNotFound = 803,
    languageNotSupport = 804,
    promptLiteralsNotFound = 805,
    promptDependenciesNotFound = 806,
    promptOptionsNotFound = 807,
    promptDependenciesError = 808,
    promptOptionsError = 809,
    promptIsOptions = 810,
    userAlreadyExists = 811,
  }
  export class ErrorGenerator {
    static internalError(exc?: Error): BusinessErrorManager;
    static documentNotFound(collectionName: string, documentId: string, exc?: Error): BusinessErrorManager;
    static documentNotSaved(collectionName: string, documentId: string, exc?: Error): BusinessErrorManager;
    static documentAlreadyExist(collectionName: string, documentId: string, exc?: Error): BusinessErrorManager;
    static invalidParameters(parameters: string[]): BusinessErrorManager;
    static projectNotFound(id: string): BusinessErrorManager;
    static languageNotSupport(collectionName: string, parameter: string, exc?: Error): BusinessErrorManager;
    static promptOptionsError(error: ErrorManager): BusinessErrorManager;
    static promptDependenciesError(error: ErrorManager): BusinessErrorManager;
    static promptLiteralsNotFound(items: string[]): BusinessErrorManager;
    static promptDependenciesNotFound(): BusinessErrorManager;
    static promptOptionsNotFound(): BusinessErrorManager;
    static userAlreadyExists(id: string, exc?: Error): BusinessErrorManager;
  }
}


// manager.ts
declare namespace ns_1 {
  import ErrorManager = __beyond_dep_ns_0.ErrorManager;
  export class BusinessErrorManager extends ErrorManager {
    get is(): string;
  }
}


export import ErrorCodes = ns_0.ErrorCodes;
export import ErrorGenerator = ns_0.ErrorGenerator;
export import BusinessErrorManager = ns_1.BusinessErrorManager;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };