/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/firestore-collection/errors';
import * as __beyond_dep_ns_1 from '@beyond-js/response/main';
import * as __beyond_dep_ns_2 from '@aimpact/agents-api/data/interfaces';
import * as __beyond_dep_ns_3 from '@beyond-js/firestore-collection/collection';
import * as __beyond_dep_ns_4 from '@aimpact/agents-api/business/errors';
import * as __beyond_dep_ns_5 from '@aimpact/agents-api/models/open-ai/caller';
import * as __beyond_dep_ns_6 from '@aimpact/agents-api/business/response';
// categories.ts
declare namespace ns_0 {
  import FirestoreErrorManager = __beyond_dep_ns_0.FirestoreErrorManager;
  import Response = __beyond_dep_ns_1.Response;
  import IPromptCategoryData = __beyond_dep_ns_2.IPromptCategoryData;
  interface IPromptCategorySpecs {
    projectId: string;
    id: string;
    name: string;
    description: string;
  }
  export class PromptCategories {
    static data(id: string): Promise<__beyond_dep_ns_3.ns_1.CollectionResponseType>;
    static save(params: IPromptCategorySpecs): Promise<FirestoreErrorManager | Response<unknown, __beyond_dep_ns_4.ns_2.BusinessErrorManager>>;
    static update(params: {}): Promise<FirestoreErrorManager | {
      stored: boolean;
    } | Response<unknown, __beyond_dep_ns_4.ns_2.BusinessErrorManager>>;
    static byProject(project: string): Promise<Response<unknown, __beyond_dep_ns_4.ns_2.BusinessErrorManager> | {
      data: {
        entries: IPromptCategoryData[];
      };
    }>;
  }
  export {};
}


// executor.ts
declare namespace ns_1 {
  import IncrementalResponseType = __beyond_dep_ns_5.IncrementalResponseType;
  import ResponseType = __beyond_dep_ns_5.ResponseType;
  import MessagesType = __beyond_dep_ns_5.MessagesType;
  import PromptTemplateProcessor = ns_4.PromptTemplateProcessor;
  export interface IPromptExecutionParams {
    category: string;
    name: string;
    language: string;
    model: string;
    temperature: number;
    messages?: MessagesType;
    format?: 'text' | 'json';
    options?: Record<string, string>;
    literals?: Record<string, string>;
  }
  /**
   * The prompt executor is used both for Generative AI and for Conversational AI
   * Both uses chat completions Open AI API
   */
  export class PromptTemplateExecutor {
    #private;
    get messages(): MessagesType;
    get model(): string;
    get temperature(): number;
    get prompt(): PromptTemplateProcessor;
    get format(): "json" | "text";
    constructor(params: IPromptExecutionParams);
    execute(): ResponseType;
    incremental(): IncrementalResponseType;
  }
}


// templates/index.ts
declare namespace ns_2 {
  import BusinessResponse = __beyond_dep_ns_6.BusinessResponse;
  import IPromptTemplateBase = __beyond_dep_ns_2.IPromptTemplateBase;
  import IPromptTemplateData = __beyond_dep_ns_2.IPromptTemplateData;
  import Response = __beyond_dep_ns_1.Response;
  type PromptTemplateResponse = Promise<BusinessResponse<IPromptTemplateData & {
    value?: string;
  }>>;
  export class PromptsTemplate {
    static data(id: string, language?: string): PromptTemplateResponse;
    static identifier(identifier: string, language?: string): Promise<BusinessResponse<unknown>>;
    static list(projectId: string, filter: string): Promise<BusinessResponse<unknown>>;
    static process(content: string, model: string, temperature: number): Promise<BusinessResponse<unknown>>;
    static delete(id: string): Promise<BusinessResponse<unknown>>;
    static update(params: any): PromptTemplateResponse;
    static save(params: IPromptTemplateBase): Promise<Response<unknown, __beyond_dep_ns_4.ns_2.BusinessErrorManager>>;
  }
  export {};
}


// templates/language.ts
declare namespace ns_3 {}


// templates/processor.ts
declare namespace ns_4 {
  import IPromptLanguageData = __beyond_dep_ns_2.IPromptLanguageData;
  import FirestoreErrorManager = __beyond_dep_ns_0.FirestoreErrorManager;
  export interface IPromptGenerationParams {
    category: string;
    name: string;
    language: string;
    options?: Record<string, string>;
    literals?: Record<string, string>;
  }
  export class PromptTemplateProcessor implements IPromptGenerationParams {
    #private;
    get category(): string;
    get name(): string;
    get language(): string;
    get id(): string;
    get options(): Record<string, string>;
    get literals(): Record<string, string>;
    get data(): IPromptLanguageData;
    get value(): string;
    get dependencies(): Record<string, string>[];
    get processedValue(): string;
    get error(): FirestoreErrorManager;
    get valid(): boolean;
    constructor(params: IPromptGenerationParams);
    process(): Promise<FirestoreErrorManager>;
  }
}


export import PromptCategories = ns_0.PromptCategories;
export import IPromptExecutionParams = ns_1.IPromptExecutionParams;
export import PromptTemplateExecutor = ns_1.PromptTemplateExecutor;
export import PromptsTemplate = ns_2.PromptsTemplate;
export import PromptTemplateProcessor = ns_4.PromptTemplateProcessor;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };