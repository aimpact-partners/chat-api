/************
Processor: ts
************/

// index.ts
declare namespace ns_0 {
  export const AudioRenderer: {
    /**
     * Renders a point-in-time snapshot of an audio sample, usually frequency values
     * @param canvas
     * @param ctx
     * @param data
     * @param color
     * @param pointCount number of bars to render
     * @param barWidth width of bars in px
     * @param barSpacing spacing between bars in px
     * @param center vertically center the bars
     */
    drawBars: (canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, data: Float32Array, color: string, pointCount?: number, barWidth?: number, barSpacing?: number, center?: boolean) => void;
  };
}


// normalize-array.ts
declare namespace ns_1 {
  /**
   * Normalizes a Float32Array to Array(m): We use this to draw amplitudes on a graph
   * If we're rendering the same audio data, then we'll often be using
   * the same (data, m, downsamplePeaks) triplets so we give option to memoize
   */
  const _default: (data: Float32Array, m: number, downsamplePeaks?: boolean, memoize?: boolean) => any;
  export { _default };
}


export import AudioRenderer = ns_0.AudioRenderer;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };