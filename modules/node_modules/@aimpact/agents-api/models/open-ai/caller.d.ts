/************
Processor: ts
************/

import __beyond_dep_def_0 from 'openai';
import * as __beyond_dep_ns_1 from '@aimpact/agents-api/business/response';
import * as __beyond_dep_ns_2 from '@aimpact/agents-api/business/errors';
// index.ts
declare namespace ns_0 {
  import OpenAI = __beyond_dep_def_0;
  import BusinessResponse = __beyond_dep_ns_1.BusinessResponse;
  import BusinessErrorManager = __beyond_dep_ns_2.BusinessErrorManager;
  export type MessagesType = OpenAI.Chat.ChatCompletionMessageParam[];
  export interface AgentTool {
    name: string;
    description: string;
    parameters: {
      type: string;
      properties: Record<string, {
        type: string;
      }>;
      required?: string[];
    };
  }
  export interface IQueryExecutionParams {
    model: string;
    temperature?: number;
    messages: MessagesType;
    tools?: AgentTool[];
    response?: {
      format: string;
    };
    browser?: boolean;
    /**
     * @deprecated Use `response.format` instead.
     */
    responseFormat?: 'text' | 'json';
  }
  export interface IResolvedTool {
    name: string;
    params: string;
    response?: {
      content: string;
    };
  }
  export interface IIncrementalResponse {
    chunk?: string;
    tool?: IResolvedTool;
    function?: {
      content: string;
    } | null;
    error?: BusinessErrorManager;
    metadata?: IIncrementalResponseMetadata;
  }
  export type IncrementalResponseType = AsyncGenerator<IIncrementalResponse>;
  export type ResponseType = Promise<BusinessResponse<{
    content: string;
  }>>;
  export interface IIncrementalResponseMetadata {
    content?: string;
    finish: string;
    messages: MessagesType;
  }
  export class OpenAICaller {
    /**
     * Processes responses from the OpenAI API incrementally.
     * This method handles both regular content and tools that need to be executed.
     * @param params - The parameters for the query execution.
     * @returns An async generator yielding incremental responses.
     */
    static incremental(params: IQueryExecutionParams): IncrementalResponseType;
    /**
     * Generates a single response from the OpenAI API.
     * @param params - The parameters for the query execution.
     * @returns A promise that resolves to the API response.
     */
    static generate(params: IQueryExecutionParams): ResponseType;
  }
}


export import MessagesType = ns_0.MessagesType;
export import AgentTool = ns_0.AgentTool;
export import IQueryExecutionParams = ns_0.IQueryExecutionParams;
export import IResolvedTool = ns_0.IResolvedTool;
export import IIncrementalResponse = ns_0.IIncrementalResponse;
export import IncrementalResponseType = ns_0.IncrementalResponseType;
export import ResponseType = ns_0.ResponseType;
export import IIncrementalResponseMetadata = ns_0.IIncrementalResponseMetadata;
export import OpenAICaller = ns_0.OpenAICaller;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };