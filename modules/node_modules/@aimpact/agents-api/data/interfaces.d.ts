/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from 'firebase-admin';
// chats\chat.ts
declare namespace ns_0 {
  import IUserBase = ns_7.IUserBase;
  export interface ILastIterationsData {
    role: string;
    content: string;
    synthesis?: string;
  }
  export interface IChatBase {
    id: string;
    name: string;
    metadata: {};
    parent: string;
    children: string;
    language: {
      default: string;
    };
    user: IUserBase;
    messages?: {
      count: number;
      lastTwo?: ILastIterationsData[];
    };
  }
  export interface IChatData extends IChatBase {
    synthesis?: string;
    project: {
      id: string;
      name: string;
      identifier: string;
      agent: {
        url: string;
      };
    };
    usage?: {
      completionTokens: number;
      promptTokens: number;
      totalTokens: number;
    };
  }
  export interface IChatDataSpecs {
    id: string;
    name: string;
    metadata: {};
    parent?: string;
    children?: string;
    language: {
      default: string;
    };
    uid: string;
    projectId: string;
  }
}


// chats\message.ts
declare namespace ns_1 {
  import firestore = __beyond_dep_ns_0.firestore;
  export type RoleType = 'system' | 'user' | 'assistant' | 'function';
  export interface IMessageBase {
    id: string;
    role: RoleType;
    content: string;
    timestamp: number | firestore.FieldValue;
  }
  export interface IMessageData extends IMessageBase {
    chatId: string;
    chat: {
      id: string;
    };
    synthesis?: string;
  }
}


// kb.ts
declare namespace ns_2 {
  export interface IKnowledgeBoxesBase {
    id: string;
    path: string;
    userId: string;
    prompt: string;
    documents: [];
  }
  export interface IKnowledgeBoxesData extends IKnowledgeBoxesBase {}
}


// projects.ts
declare namespace ns_3 {
  export interface IProjectBase {
    id: string;
    name: string;
    agent: {
      url: string;
    };
  }
  export interface IProjectData extends IProjectBase {
    identifier: string;
    description: string;
  }
}


// prompts\category.ts
declare namespace ns_4 {
  export interface IPromptCategoryBase {
    id: string;
    name: string;
    description: string;
  }
  export interface IPromptCategoryData extends IPromptCategoryBase {
    prompts: Record<string, string>;
    project: {
      id: string;
      name: string;
    };
  }
}


// prompts\language.ts
declare namespace ns_5 {
  export interface IPromptOptionData {
    id: string;
    value: string;
  }
  export interface IPromptLanguageData {
    id: string;
    language: string;
    value?: string;
    literals?: {
      pure?: string[];
      dependencies?: string[];
      metadata?: string[];
    };
    project: {
      id: string;
      name: string;
      identifier: string;
    };
    options?: IPromptOptionData[];
  }
}


// prompts\template.ts
declare namespace ns_6 {
  import IPromptCategoryData = ns_4.IPromptCategoryData;
  import IPromptOptionData = ns_5.IPromptOptionData;
  interface IBaseData {
    id: string;
    name: string;
    description?: string;
    language: {
      default: string;
      languages: string[];
    };
    format: 'json' | 'text';
    is: 'prompt' | 'function' | 'dependency';
    literals?: {
      pure?: string[];
      dependencies?: string[];
      metadata?: string[];
    };
  }
  export interface IPromptTemplateBase extends IBaseData {
    projectId: string;
    language: {
      default: string;
      languages: string[];
    };
    value?: string;
    options?: IPromptOptionData[];
  }
  export interface IPromptTemplateData extends IBaseData {
    identifier: string;
    project: {
      id: string;
      name: string;
      identifier: string;
    };
    categories?: IPromptCategoryData[];
    value?: string;
  }
  export interface IPromptTemplateLanguageData {
    id: string;
    project: {
      id: string;
      name: string;
      identifier: string;
    };
    language: string;
    value?: string;
    literals?: {
      pure?: string[];
      dependencies?: string[];
      metadata?: string[];
    };
  }
  export {};
}


// users.ts
declare namespace ns_7 {
  export interface IUserBase {
    uid: string;
    id: string;
    name: string;
    displayName: string;
    email: string;
    photoURL: string;
    phoneNumber: number;
  }
  export interface IUserData extends IUserBase {
    firebaseToken: string;
    token: string;
    custom: string;
    createdOn: number;
    lastLogin: number;
  }
}


export import ILastIterationsData = ns_0.ILastIterationsData;
export import IChatBase = ns_0.IChatBase;
export import IChatData = ns_0.IChatData;
export import IChatDataSpecs = ns_0.IChatDataSpecs;
export import RoleType = ns_1.RoleType;
export import IMessageBase = ns_1.IMessageBase;
export import IMessageData = ns_1.IMessageData;
export import IKnowledgeBoxesBase = ns_2.IKnowledgeBoxesBase;
export import IKnowledgeBoxesData = ns_2.IKnowledgeBoxesData;
export import IProjectBase = ns_3.IProjectBase;
export import IProjectData = ns_3.IProjectData;
export import IPromptCategoryBase = ns_4.IPromptCategoryBase;
export import IPromptCategoryData = ns_4.IPromptCategoryData;
export import IPromptOptionData = ns_5.IPromptOptionData;
export import IPromptLanguageData = ns_5.IPromptLanguageData;
export import IPromptTemplateBase = ns_6.IPromptTemplateBase;
export import IPromptTemplateData = ns_6.IPromptTemplateData;
export import IPromptTemplateLanguageData = ns_6.IPromptTemplateLanguageData;
export import IUserBase = ns_7.IUserBase;
export import IUserData = ns_7.IUserData;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };