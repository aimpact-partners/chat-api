(()=>{var f=class extends AudioWorkletProcessor{#r=!1;#s=!1;#a=128;#t={buffer:new Float32Array(this.#a),trackId:null};#i=0;#o=[];#e={};constructor(){super(),this.port.onmessage=this.#f.bind(this)}#u(r,o=null){let{buffer:s}=this.#t,e=this.#i;for(let t=0;t<r.length;t++)s[e++]=r[t],e>=s.length&&(this.#o.push(this.#t),this.#t={buffer:new Float32Array(this.#a),trackId:o},s=this.#t.buffer,e=0);return this.#i=e,!0}process(r,o){let e=o[0][0],t=this.#o;if(this.#s)return this.port.postMessage({method:"stop"}),!1;if(t.length){this.#r=!0;let{buffer:u,trackId:a}=t.shift();for(let i=0;i<e.length;i++)e[i]=u[i]||0;return a&&(this.#e[a]=this.#e[a]||0,this.#e[a]+=u.length),!0}else return this.#r?(this.port.postMessage({method:"stop"}),!1):!0}#f(r){if(!r.data?.method)return;let{id:o,method:s}=r.data,e,t;switch(s){case"write":let{buffer:u}=r.data.data;t=r.data.data.trackId;let a=new Float32Array(u.length);u.forEach((h,n)=>a[n]=h/32768),this.#u(a,t);break;case"offset":case"interrupt":t=this.#t.trackId;let i=this.#e[t]||0;s==="interrupt"&&(this.#s=!0),e={trackId:t,offset:i};break;default:throw new Error('Method "${method}" is invalid')}this.port.postMessage({method:"response",id:o,data:e})}};registerProcessor("stream_processor",f);})();
//# sourceMappingURL=index.js.map
